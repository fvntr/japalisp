#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 73)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    14,    13,    10,    11,    23,    28,    21,    15,    12,    14,
    13,    10,    11,    19,    18,    18,    15,    12,    14,    13,
    10,    11,    16,    18,   nil,    15,    12,    14,    13,    10,
    11,   nil,   nil,   nil,    15,    12,    14,    13,    10,    11,
   nil,   nil,   nil,    15,    12,    14,    13,    10,    11,   nil,
   nil,   nil,    15,    12,    14,    13,    10,    11,   nil,   nil,
   nil,    15,    12,    14,    13,    10,    11,   nil,   nil,   nil,
    15,    12,    14,    13,    10,    11,   nil,   nil,   nil,    15,
    12,    14,    13,    10,    11,   nil,   nil,   nil,    15,    12 ]

racc_action_check = [
     0,     0,     0,     0,    16,    21,    14,     0,     0,    31,
    31,    31,    31,    11,     2,    29,    31,    31,    28,    28,
    28,    28,     1,    33,   nil,    28,    28,    25,    25,    25,
    25,   nil,   nil,   nil,    25,    25,    12,    12,    12,    12,
   nil,   nil,   nil,    12,    12,    22,    22,    22,    22,   nil,
   nil,   nil,    22,    22,    15,    15,    15,    15,   nil,   nil,
   nil,    15,    15,    20,    20,    20,    20,   nil,   nil,   nil,
    20,    20,    17,    17,    17,    17,   nil,   nil,   nil,    17,
    17,    19,    19,    19,    19,   nil,   nil,   nil,    19,    19 ]

racc_action_pointer = [
    -2,    22,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    34,   nil,     3,    52,     4,    70,   nil,    79,
    61,    -1,    43,   nil,   nil,    25,   nil,   nil,    16,     7,
   nil,     7,   nil,    15 ]

racc_action_default = [
    -1,   -21,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -13,   -21,   -21,   -18,   -21,   -21,   -21,    -5,   -12,   -21,
   -21,   -21,   -21,    34,    -4,   -14,   -16,   -17,   -21,   -20,
   -15,   -21,    -3,   -19 ]

racc_goto_table = [
     2,    20,    25,     1,    22,   nil,    24,   nil,    26,    27,
   nil,    31,   nil,   nil,    30,   nil,   nil,    26,   nil,   nil,
    32,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33 ]

racc_goto_check = [
     2,     3,    11,     1,     3,   nil,     3,   nil,     3,     3,
   nil,    11,   nil,   nil,     3,   nil,   nil,     3,   nil,   nil,
     3,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2 ]

racc_goto_pointer = [
   nil,     3,     0,   -11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -17 ]

racc_goto_default = [
   nil,   nil,   nil,     3,    17,     4,     5,     6,     7,     8,
     9,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 12, :_reduce_1,
  1, 12, :_reduce_2,
  1, 13, :_reduce_3,
  3, 13, :_reduce_4,
  2, 13, :_reduce_5,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 15, :_reduce_none,
  1, 16, :_reduce_13,
  3, 17, :_reduce_14,
  2, 22, :_reduce_15,
  1, 22, :_reduce_16,
  3, 18, :_reduce_17,
  1, 19, :_reduce_18,
  5, 20, :_reduce_19,
  3, 21, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 34

racc_token_table = {
  false => 0,
  :error => 1,
  :DEF => 2,
  :IDENTIFIER => 3,
  :NUMBER => 4,
  :CALL => 5,
  :ARGS => 6,
  :RETURN => 7,
  :TERM => 8,
  :IF => 9,
  "*" => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DEF",
  "IDENTIFIER",
  "NUMBER",
  "CALL",
  "ARGS",
  "RETURN",
  "TERM",
  "IF",
  "\"*\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "GetLocal",
  "Def",
  "If",
  "Arguments" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 14)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 15)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 19)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 21)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_13(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_14(val, _values, result)
     result = CallNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_15(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_16(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_17(val, _values, result)
     result = CallNode.new(val[0], [val[1], val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_18(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_19(val, _values, result)
     result = DefNode.new(val[1], val[3], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_20(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
